# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.6)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6...3.20)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget nvblox::nvblox_lib nvblox::nvblox_gpu_hash nvblox::nvblox_datasets nvblox::stdgpu nvblox::nvblox_eigen nvblox::fuse_3dmatch nvblox::fuse_replica)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target nvblox::nvblox_lib
add_library(nvblox::nvblox_lib SHARED IMPORTED)

set_target_properties(nvblox::nvblox_lib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;/usr/local/cuda/targets/aarch64-linux/include;/usr/include;${_IMPORT_PREFIX}/include/nvblox;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "/usr/lib/aarch64-linux-gnu/libglog.so;gflags;nvblox::nvblox_eigen;/usr/local/cuda/lib64/libcudart_static.a;Threads::Threads;dl;/usr/lib/aarch64-linux-gnu/librt.a;nvblox::nvblox_gpu_hash"
  INTERFACE_LINK_OPTIONS "-Wl,--disable-new-dtags"
)

# Create imported target nvblox::nvblox_gpu_hash
add_library(nvblox::nvblox_gpu_hash STATIC IMPORTED)

set_target_properties(nvblox::nvblox_gpu_hash PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/nvblox;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "nvblox::stdgpu;nvblox::nvblox_eigen;/usr/local/cuda/lib64/libnvToolsExt.so;/usr/lib/aarch64-linux-gnu/libglog.so;\$<LINK_ONLY:gflags>"
  INTERFACE_LINK_OPTIONS "-Wl,--disable-new-dtags"
)

# Create imported target nvblox::nvblox_datasets
add_library(nvblox::nvblox_datasets SHARED IMPORTED)

set_target_properties(nvblox::nvblox_datasets PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/nvblox"
  INTERFACE_LINK_LIBRARIES "nvblox::nvblox_lib"
)

# Create imported target nvblox::stdgpu
add_library(nvblox::stdgpu STATIC IMPORTED)

set_target_properties(nvblox::stdgpu PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "THRUST_DEVICE_SYSTEM=THRUST_DEVICE_SYSTEM_CUDA"
  INTERFACE_COMPILE_FEATURES "cxx_std_14;cuda_std_14"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/nvblox;${_IMPORT_PREFIX}/include"
)

# Create imported target nvblox::nvblox_eigen
add_library(nvblox::nvblox_eigen INTERFACE IMPORTED)

set_target_properties(nvblox::nvblox_eigen PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/eigen3;${_IMPORT_PREFIX}/include/nvblox;${_IMPORT_PREFIX}/include"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "include/eigen3"
)

# Create imported target nvblox::fuse_3dmatch
add_executable(nvblox::fuse_3dmatch IMPORTED)

set_target_properties(nvblox::fuse_3dmatch PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/nvblox"
)

# Create imported target nvblox::fuse_replica
add_executable(nvblox::fuse_replica IMPORTED)

set_target_properties(nvblox::fuse_replica PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/nvblox"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/nvbloxTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
